{"version":3,"sources":["interfaces/index.ts","sounds/backgroundSound.mp3","sounds/beautifullvlong.wav","sounds/cutefrogmedium.wav","sounds/flowing-canal.wav","sounds/hint.wav","sounds/move.wav","sounds/win.wav","sounds/wrong-move.mp3","contexts/AudioContext.tsx","img/frog.svg","utils/board.ts","components/Tile.tsx","components/Board.tsx","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["MotionDirection","AudioContext","createContext","AudioProvider","children","track1Ref","useRef","track2Ref","track3Ref","track4Ref","tileMoveSoundRef","wrongMoveRequestSoundRef","hintSoundRef","levelCompletedSoundRef","useEffect","track1Node","current","track2Node","track3Node","track4Node","focusEventCallback","play","blurEventCallback","pause","userInteractionCallback","window","removeEventListener","volume","addEventListener","value","moveTileSound","currentTime","wrongMoveRequestTileSound","boardOrderHintSound","levelCompletedSound","Promise","resolve","onpause","Provider","ref","src","backgroundSound1","loop","backgroundSound2","frogSound1","frogSound2","tileMoveSound","preload","wrongMoveRequestSound","hintSound","levelCompletedSoundSrc","moveTileLogically","tileGrid","emptySlot","movableSlot","tileIndexTable","flat","reduce","accumulator","tile","slot","join","getMovableSlots","emptyX","emptyY","maxX","maxY","filter","x","y","BASE_DIMENSION","generateTileGrid","width","height","dimensions","image","columnCount","rowCount","tileDimensions","tileBackgroundImage","tileBackgroundSize","Array","from","length","map","a","rowIndex","columnIndex","position","background","size","type","randomizationMoves","maxSlot","movableSlots","i","slotInTransit","Math","floor","random","randomizeTileGrid","useStyles","makeStyles","display","backgroundRepeat","borderRadius","transition","willChange","counterIncrement","content","paddingLeft","paddingTop","color","textShadow","moveHint","boxShadow","zIndex","slotHint","border","boxSizing","animation","to","backgroundPosition","Tile","onMoveRequest","isLocked","motionDirection","scaleFactor","onPositionHintRequest","classes","useContext","classList","style","top","left","includes","push","Object","assign","backgroundImage","backgroundSize","tileRef","navigator","maxTouchPoints","tileNode","mouseDownEventCallback","event","button","preventDefault","exitPositionHint","mouseUpEventCallback","contextmenuEventCallback","touchStartEventCallback","targetTouches","changedTouches","tileNodeGhost","startX","clientX","startY","clientY","currentX","currentY","moveTile","touchMoveBootstrapEventCallback","cloneNode","transform","after","touchMoveEventCallback","moveX","moveY","LEFT","RIGHT","TOP","BOTTOM","touchEndEventCallback","remove","onClick","className","BASE_IMAGE","frog","BASE_GRID_DIMENSIONS","Board","boardWrapperRef","initialLoadRef","useState","level","setLevel","tileGridDimensions","setTileGridDimensions","isLevelLoaded","setIsLevelLoaded","isComputingBoardTiles","setIsComputingBoardTiles","overlayMessage","setOverlayMessage","setHeight","setTileGrid","setEmptySlot","setMovableSlots","setScaleFactor","isLoadedFromCache","setIsLoadedFromCache","localStorage","setItem","JSON","stringify","nextLevel","useCallback","setTimeout","forEach","prevLevel","handleTileMoveRequest","parseInt","isTileGridInOrder","handleTilePositionHintRequest","requestingTile","slotTile","requestingTileType","slotTileType","serializedBoardConfig","getItem","parse","every","key","Image","onload","visibility","document","body","append","resizeCallback","boardHeight","boardWidth","parentElement","heightScaleFactor","offsetHeight","widthScaleFactor","offsetWidth","boardNode","exitBoardHint","hintTimeout","row","clearTimeout","keyupCallback","slotToMove","timeout","transformOrigin","justifyContent","alignItems","Box","sx","backgroundColor","overflow","counterReset","bgcolor","Typography","variant","theme","createTheme","components","MuiCssBaseline","styleOverrides","html","minHeight","margin","fontFamily","cursor","code","pre","padding","App","ThemeProvider","p","IconButton","boardWrapperNode","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","bottom","right","fontSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.43561368.chunk.js","sourcesContent":["export type ISlot = [number, number];\r\n\r\nexport interface ITile {\r\n  slot: ISlot;\r\n  slotHint?: ISlot;\r\n  position: number;\r\n  isLocked?: boolean;\r\n  type?: 'PLACEHOLDER' | 'MOVE_HINT' | 'SLOT_HINT';\r\n  dimensions: { width: number; height: number };\r\n  background: {\r\n    image: string;\r\n    size: string;\r\n    position: string;\r\n  };\r\n}\r\n\r\nexport enum MotionDirection {\r\n  TOP,\r\n  RIGHT,\r\n  BOTTOM,\r\n  LEFT,\r\n}\r\n\r\nexport type ITileGrid = ITile[][];\r\n\r\nexport interface IBoardAudio {\r\n  moveTileSound: () => void;\r\n  wrongMoveRequestTileSound: () => void;\r\n  boardOrderHintSound: () => void;\r\n  levelCompletedSound: () => Promise<any>;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/backgroundSound.15e6429d.mp3\";","export default __webpack_public_path__ + \"static/media/beautifullvlong.3d9c5268.wav\";","export default __webpack_public_path__ + \"static/media/cutefrogmedium.096d1324.wav\";","export default __webpack_public_path__ + \"static/media/flowing-canal.01563c63.wav\";","export default __webpack_public_path__ + \"static/media/hint.988fc418.wav\";","export default __webpack_public_path__ + \"static/media/move.a7304208.wav\";","export default __webpack_public_path__ + \"static/media/win.8984c762.wav\";","export default __webpack_public_path__ + \"static/media/wrong-move.f055716f.mp3\";","/* eslint-disable eslint-comments/disable-enable-pair */\r\n/* eslint-disable jsx-a11y/media-has-caption */\r\nimport { createContext, useEffect, useRef } from 'react';\r\n\r\nimport { IBoardAudio } from '../interfaces';\r\nimport backgroundSound2 from '../sounds/backgroundSound.mp3';\r\nimport frogSound2 from '../sounds/beautifullvlong.wav';\r\nimport frogSound1 from '../sounds/cutefrogmedium.wav';\r\nimport backgroundSound1 from '../sounds/flowing-canal.wav';\r\nimport hintSound from '../sounds/hint.wav';\r\nimport tileMoveSound from '../sounds/move.wav';\r\nimport levelCompletedSoundSrc from '../sounds/win.wav';\r\nimport wrongMoveRequestSound from '../sounds/wrong-move.mp3';\r\n\r\nexport const AudioContext = createContext<any>({});\r\n\r\nexport const AudioProvider: React.FC = ({ children }) => {\r\n  const track1Ref = useRef<HTMLAudioElement>(null);\r\n  const track2Ref = useRef<HTMLAudioElement>(null);\r\n  const track3Ref = useRef<HTMLAudioElement>(null);\r\n  const track4Ref = useRef<HTMLAudioElement>(null);\r\n\r\n  const tileMoveSoundRef = useRef<HTMLAudioElement>(null);\r\n  const wrongMoveRequestSoundRef = useRef<HTMLAudioElement>(null);\r\n  const hintSoundRef = useRef<HTMLAudioElement>(null);\r\n  const levelCompletedSoundRef = useRef<HTMLAudioElement>(null);\r\n\r\n  const moveTileSound = () => {\r\n    if (tileMoveSoundRef.current) {\r\n      tileMoveSoundRef.current.volume = 0.9;\r\n      tileMoveSoundRef.current.currentTime = 0;\r\n      tileMoveSoundRef.current.play();\r\n    }\r\n  };\r\n\r\n  const wrongMoveRequestTileSound = () => {\r\n    if (wrongMoveRequestSoundRef.current) {\r\n      wrongMoveRequestSoundRef.current.volume = 0.7;\r\n      wrongMoveRequestSoundRef.current.currentTime = 0;\r\n      wrongMoveRequestSoundRef.current.play();\r\n    }\r\n  };\r\n\r\n  const boardOrderHintSound = () => {\r\n    if (hintSoundRef.current) {\r\n      hintSoundRef.current.volume = 0.7;\r\n      hintSoundRef.current.currentTime = 0;\r\n      hintSoundRef.current.play();\r\n    }\r\n  };\r\n\r\n  const levelCompletedSound = () => {\r\n    return new Promise((resolve) => {\r\n      if (levelCompletedSoundRef.current) {\r\n        levelCompletedSoundRef.current.volume = 0.1;\r\n        levelCompletedSoundRef.current.currentTime = 0;\r\n        levelCompletedSoundRef.current.onpause = resolve;\r\n        levelCompletedSoundRef.current.play();\r\n      } else {\r\n        resolve(null);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const track1Node = track1Ref.current;\r\n    const track2Node = track2Ref.current;\r\n    const track3Node = track3Ref.current;\r\n    const track4Node = track4Ref.current;\r\n    if (track1Node || track2Node || track3Node || track4Node) {\r\n      const focusEventCallback = () => {\r\n        track1Node && track1Node.play();\r\n        track2Node && track2Node.play();\r\n        track3Node && track3Node.play();\r\n        track4Node && track4Node.play();\r\n      };\r\n      const blurEventCallback = () => {\r\n        track1Node && track1Node.pause();\r\n        track2Node && track2Node.pause();\r\n        track3Node && track3Node.pause();\r\n        track4Node && track4Node.pause();\r\n      };\r\n      const userInteractionCallback = () => {\r\n        window.removeEventListener('click', userInteractionCallback);\r\n        focusEventCallback();\r\n      };\r\n      track1Node && (track1Node.volume = 0.1);\r\n      track2Node && (track2Node.volume = 0.2);\r\n      track3Node && (track3Node.volume = 0.1);\r\n      track4Node && (track4Node.volume = 0.1);\r\n      window.addEventListener('click', userInteractionCallback);\r\n      window.addEventListener('focus', focusEventCallback);\r\n      window.addEventListener('blur', blurEventCallback);\r\n      return () => {\r\n        blurEventCallback();\r\n        window.removeEventListener('focus', focusEventCallback);\r\n        window.removeEventListener('blur', blurEventCallback);\r\n        window.removeEventListener('click', userInteractionCallback);\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  const value: IBoardAudio = {\r\n    moveTileSound,\r\n    wrongMoveRequestTileSound,\r\n    boardOrderHintSound,\r\n    levelCompletedSound,\r\n  };\r\n\r\n  return (\r\n    <AudioContext.Provider value={value}>\r\n      {children}\r\n      <audio ref={track1Ref} src={backgroundSound1} loop></audio>\r\n      <audio ref={track2Ref} src={backgroundSound2} loop></audio>\r\n      <audio ref={track3Ref} src={frogSound1} loop></audio>\r\n      <audio ref={track4Ref} src={frogSound2} loop></audio>\r\n\r\n      <audio ref={tileMoveSoundRef} src={tileMoveSound} preload=\"auto\"></audio>\r\n      <audio\r\n        ref={wrongMoveRequestSoundRef}\r\n        src={wrongMoveRequestSound}\r\n        preload=\"auto\"\r\n      ></audio>\r\n      <audio ref={hintSoundRef} src={hintSound} preload=\"auto\"></audio>\r\n      <audio\r\n        ref={levelCompletedSoundRef}\r\n        src={levelCompletedSoundSrc}\r\n        preload=\"auto\"\r\n      ></audio>\r\n    </AudioContext.Provider>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/frog.747d96f1.svg\";","import { ISlot, ITileGrid } from '../interfaces';\r\n\r\nexport const moveTilePhysically = (\r\n  tileGrid: ITileGrid,\r\n  emptySlot: ISlot,\r\n  movableSlot: ISlot\r\n) => {\r\n  const [emptySlotX, emptySlotY] = emptySlot;\r\n  const [movableX, movableY] = movableSlot;\r\n  moveTileLogically(tileGrid, emptySlot, movableSlot);\r\n  const placeholderTile = tileGrid[emptySlotX][emptySlotY];\r\n  tileGrid[emptySlotX][emptySlotY] = tileGrid[movableX][movableY];\r\n  tileGrid[movableX][movableY] = placeholderTile;\r\n};\r\n\r\nexport const moveTileLogically = (\r\n  tileGrid: ITileGrid,\r\n  emptySlot: ISlot,\r\n  movableSlot: ISlot\r\n) => {\r\n  const tileIndexTable: any = tileGrid\r\n    .flat()\r\n    .reduce((accumulator: any, tile) => {\r\n      accumulator[tile.slot.join('')] = tile;\r\n      return accumulator;\r\n    }, {});\r\n  tileIndexTable[emptySlot.join('')].slot = movableSlot;\r\n  tileIndexTable[movableSlot.join('')].slot = emptySlot;\r\n};\r\n\r\nexport const getMovableSlots = (\r\n  [emptyX, emptyY]: ISlot,\r\n  [maxX, maxY]: ISlot\r\n): ISlot[] => {\r\n  const closest: ISlot[] = [\r\n    [emptyX - 1, emptyY],\r\n    [emptyX + 1, emptyY],\r\n    [emptyX, emptyY - 1],\r\n    [emptyX, emptyY + 1],\r\n  ];\r\n  return closest.filter(([x, y]) => {\r\n    return x >= 0 && x <= maxX && y >= 0 && y <= maxY;\r\n  });\r\n};\r\n\r\nexport const randomizeTileGrid = (\r\n  tileGrid: ITileGrid,\r\n  randomizationMoves: number\r\n): {\r\n  tileGrid: ITileGrid;\r\n  emptySlot: ISlot;\r\n  movableSlots: ISlot[];\r\n} => {\r\n  const maxSlot: ISlot =\r\n    tileGrid[tileGrid.length - 1][tileGrid[0].length - 1].slot;\r\n  let emptySlot: ISlot = [...maxSlot];\r\n  let movableSlots: ISlot[] = getMovableSlots(emptySlot, maxSlot);\r\n  for (let i = 0; i < randomizationMoves; i++) {\r\n    const slotInTransit =\r\n      movableSlots[Math.floor(Math.random() * movableSlots.length)];\r\n    moveTileLogically(tileGrid, emptySlot, slotInTransit);\r\n    emptySlot = slotInTransit;\r\n    movableSlots = getMovableSlots(emptySlot, maxSlot);\r\n  }\r\n  return {\r\n    tileGrid: [...tileGrid],\r\n    emptySlot,\r\n    movableSlots,\r\n  };\r\n};\r\n\r\nexport const BASE_DIMENSION = 1280;\r\n\r\nexport const generateTileGrid = ({\r\n  width,\r\n  height,\r\n  dimensions,\r\n  image,\r\n}: {\r\n  width: number;\r\n  height: number;\r\n  dimensions: number[];\r\n  image: string;\r\n}): { emptySlot: ISlot; tileGrid: ITileGrid; movableSlots: ISlot[] } => {\r\n  const [columnCount, rowCount] = dimensions;\r\n  const tileDimensions = {\r\n    width: width / columnCount,\r\n    height: height / rowCount,\r\n  };\r\n  const tileBackgroundImage = `url(${image})`;\r\n  const tileBackgroundSize = `${BASE_DIMENSION}px auto`;\r\n  const tileGrid: ITileGrid = Array.from({ length: rowCount }).map(\r\n    (a, rowIndex) => {\r\n      return Array.from({ length: columnCount }).map((a, columnIndex) => {\r\n        const { width, height } = tileDimensions;\r\n        const x = columnIndex * width;\r\n        const y = rowIndex * height;\r\n        return {\r\n          slot: [rowIndex, columnIndex],\r\n          position: rowIndex * columnCount + columnIndex,\r\n          dimensions: tileDimensions,\r\n          background: {\r\n            image: tileBackgroundImage,\r\n            size: tileBackgroundSize,\r\n            position: `${-x}px ${-y}px`,\r\n          },\r\n        };\r\n      });\r\n    }\r\n  );\r\n  tileGrid[rowCount - 1][columnCount - 1].type = 'PLACEHOLDER';\r\n  let randomizationMoves = columnCount * rowCount - 1;\r\n  randomizationMoves > 3 && (randomizationMoves *= 100);\r\n  const {\r\n    tileGrid: randomizedTileGrid,\r\n    emptySlot,\r\n    movableSlots,\r\n  } = randomizeTileGrid(tileGrid, randomizationMoves);\r\n  return {\r\n    tileGrid: randomizedTileGrid,\r\n    emptySlot,\r\n    movableSlots,\r\n  };\r\n};\r\n\r\nexport const isTileGridInOrder = (tileGrid: ITileGrid): boolean => {\r\n  for (const rowIndex in tileGrid) {\r\n    for (const columnIndex in tileGrid[rowIndex]) {\r\n      if (\r\n        tileGrid[rowIndex][columnIndex].slot[0] !== parseInt(rowIndex) ||\r\n        tileGrid[rowIndex][columnIndex].slot[1] !== parseInt(columnIndex)\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n};\r\n","/* eslint-disable eslint-comments/disable-enable-pair */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport React, { CSSProperties, useContext, useEffect, useRef } from 'react';\r\n\r\nimport { AudioContext } from '../contexts';\r\nimport { IBoardAudio, ISlot, ITile, MotionDirection } from '../interfaces';\r\n\r\ninterface ITileProps extends ITile {\r\n  scaleFactor: number;\r\n  motionDirection?: MotionDirection;\r\n  onMoveRequest: (slot: ISlot) => void;\r\n  onPositionHintRequest: (position: number, slot: ISlot) => (() => void) | void;\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  tile: {\r\n    display: 'block',\r\n    backgroundRepeat: 'no-repeat',\r\n    position: 'absolute',\r\n    borderRadius: '6px',\r\n    transition: 'left .2s, top .2s',\r\n    willChange: 'top, left, z-index',\r\n    '&:before': {\r\n      display: 'none',\r\n      counterIncrement: 'tile-number',\r\n      content: 'counter(tile-number)',\r\n      paddingLeft: '10px',\r\n      paddingTop: '10px',\r\n      color: '#ddd',\r\n      textShadow: '0 1px 1px #000',\r\n    },\r\n  },\r\n  moveHint: {\r\n    boxShadow: `\r\n      0px 0px 10px #0f0,\r\n      0px 0px 10px #0f0 inset\r\n    `,\r\n    zIndex: 99,\r\n  },\r\n  slotHint: {\r\n    border: '4px solid transparent',\r\n    boxSizing: 'border-box',\r\n    background: `\r\n      linear-gradient(#ccc, #ccc) padding-box,\r\n      repeating-linear-gradient(-45deg, #333 0, #333 25%, transparent 0, transparent 50%) 0 / .6em .6em\r\n    `,\r\n    animation: '$ants 12s linear infinite',\r\n    zIndex: 100,\r\n  },\r\n  '@keyframes ants': {\r\n    to: {\r\n      backgroundPosition: '100%',\r\n    },\r\n  },\r\n}));\r\n\r\nconst Tile: React.FC<ITileProps> = ({\r\n  background,\r\n  dimensions,\r\n  type,\r\n  slot,\r\n  slotHint,\r\n  onMoveRequest,\r\n  isLocked,\r\n  position,\r\n  motionDirection,\r\n  scaleFactor,\r\n  onPositionHintRequest,\r\n}) => {\r\n  slotHint && (slot = slotHint);\r\n  const classes = useStyles();\r\n\r\n  const { wrongMoveRequestTileSound }: IBoardAudio = useContext(AudioContext);\r\n\r\n  const classList = [classes.tile];\r\n  const style: CSSProperties = {\r\n    width: dimensions.width,\r\n    height: dimensions.height,\r\n    top: slot[0] * dimensions.height,\r\n    left: slot[1] * dimensions.width,\r\n  };\r\n  if (!['SLOT_HINT', 'MOVE_HINT'].includes(type || '')) {\r\n    style.zIndex = slot[0];\r\n  }\r\n  switch (type) {\r\n    case 'PLACEHOLDER':\r\n      break;\r\n    case 'SLOT_HINT':\r\n      classList.push(classes.slotHint);\r\n      break;\r\n  }\r\n  if (!type || type === 'MOVE_HINT' || slotHint) {\r\n    Object.assign(style, {\r\n      backgroundImage: background.image,\r\n      backgroundSize: background.size,\r\n      backgroundPosition: background.position,\r\n    });\r\n    if (type === 'MOVE_HINT') {\r\n      classList.push(classes.moveHint);\r\n    } else {\r\n      style.boxShadow = `\r\n        0 -3px 3px -3px #333 inset,\r\n        0 0 3px -1px #333 inset,\r\n        0 3px 5px -3px #fff inset,\r\n        0 -1px 3px -4px #fff inset,\r\n        0 20px 20px -10px rgba(0, 0, 0, 0.5)\r\n      `;\r\n    }\r\n  }\r\n\r\n  const tileRef = useRef<HTMLDivElement>(null);\r\n\r\n  const handleClick = () => {\r\n    if (type !== 'PLACEHOLDER') {\r\n      if (isLocked) {\r\n        wrongMoveRequestTileSound();\r\n      } else {\r\n        onMoveRequest(slot);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (navigator?.maxTouchPoints === 0 && tileRef.current) {\r\n      const tileNode = tileRef.current;\r\n      const mouseDownEventCallback = (event: MouseEvent) => {\r\n        if (event.button === 2) {\r\n          event.preventDefault();\r\n          const exitPositionHint: (() => void) | void = onPositionHintRequest(\r\n            position,\r\n            slot\r\n          );\r\n          const mouseUpEventCallback = () => {\r\n            window.removeEventListener('mouseup', mouseUpEventCallback);\r\n            typeof exitPositionHint === 'function' && exitPositionHint();\r\n          };\r\n          window.addEventListener('mouseup', mouseUpEventCallback);\r\n        }\r\n      };\r\n      const contextmenuEventCallback = (event: MouseEvent) => {\r\n        event.preventDefault();\r\n      };\r\n      tileNode.addEventListener('contextmenu', contextmenuEventCallback);\r\n      tileNode.addEventListener('mousedown', mouseDownEventCallback);\r\n      return () => {\r\n        tileNode.removeEventListener('mousedown', mouseDownEventCallback);\r\n        tileNode.removeEventListener('contextmenu', contextmenuEventCallback);\r\n      };\r\n    }\r\n  }, [slot, position, onPositionHintRequest]);\r\n\r\n  useEffect(() => {\r\n    if (!isLocked && navigator.maxTouchPoints > 0 && tileRef.current) {\r\n      const tileNode = tileRef.current;\r\n      const touchStartEventCallback = (event: TouchEvent) => {\r\n        if (\r\n          event.targetTouches.length === 1 &&\r\n          event.changedTouches.length === 1\r\n        ) {\r\n          event.preventDefault();\r\n          const { clientX: startX, clientY: startY } = event.changedTouches[0];\r\n          const display = tileNode.style.display;\r\n          let tileNodeGhost: HTMLDivElement;\r\n          let currentX = startX;\r\n          let currentY = startY;\r\n          let moveTile = false;\r\n          const touchMoveBootstrapEventCallback = () => {\r\n            tileNodeGhost = tileNode.cloneNode(false) as HTMLDivElement;\r\n            tileNode.style.display = 'none';\r\n            tileNodeGhost.style.transition = 'none';\r\n            tileNodeGhost.style.zIndex = '999';\r\n            tileNodeGhost.style.transform = 'translate(0, 0)';\r\n            tileNode.after(tileNodeGhost);\r\n            window.removeEventListener(\r\n              'touchmove',\r\n              touchMoveBootstrapEventCallback\r\n            );\r\n            window.addEventListener('touchmove', touchMoveEventCallback);\r\n          };\r\n          const touchMoveEventCallback = (event: TouchEvent) => {\r\n            const { clientX: moveX, clientY: moveY } = event.changedTouches[0];\r\n            switch (motionDirection) {\r\n              case MotionDirection.LEFT:\r\n              case MotionDirection.RIGHT:\r\n                const x = (moveX - startX) / scaleFactor;\r\n                switch (motionDirection) {\r\n                  case MotionDirection.LEFT:\r\n                    moveTile = moveX - currentX < 0;\r\n                    x < 0 &&\r\n                      x > -dimensions.width &&\r\n                      (tileNodeGhost.style.transform = `translateX(${x}px)`);\r\n                    break;\r\n                  case MotionDirection.RIGHT:\r\n                    moveTile = moveX - currentX > 0;\r\n                    x > 0 &&\r\n                      x < dimensions.width &&\r\n                      (tileNodeGhost.style.transform = `translateX(${x}px)`);\r\n                    break;\r\n                }\r\n                break;\r\n              case MotionDirection.TOP:\r\n              case MotionDirection.BOTTOM:\r\n                const y = (moveY - startY) / scaleFactor;\r\n                switch (motionDirection) {\r\n                  case MotionDirection.TOP:\r\n                    moveTile = moveY - currentY < 0;\r\n                    y < 0 &&\r\n                      y > -dimensions.height &&\r\n                      (tileNodeGhost.style.transform = `translateY(${y}px)`);\r\n                    break;\r\n                  case MotionDirection.BOTTOM:\r\n                    moveTile = moveY - currentY > 0;\r\n                    y > 0 &&\r\n                      y < dimensions.height &&\r\n                      (tileNodeGhost.style.transform = `translateY(${y}px)`);\r\n                    break;\r\n                }\r\n                break;\r\n            }\r\n            currentX = moveX;\r\n            currentY = moveY;\r\n          };\r\n          const touchEndEventCallback = (event: TouchEvent) => {\r\n            event.preventDefault();\r\n            window.removeEventListener(\r\n              'touchmove',\r\n              touchMoveBootstrapEventCallback\r\n            );\r\n            window.removeEventListener('touchmove', touchMoveEventCallback);\r\n            window.removeEventListener('touchend', touchEndEventCallback);\r\n            if (tileNodeGhost) {\r\n              tileNode.style.display = display;\r\n              tileNodeGhost.remove();\r\n              moveTile && onMoveRequest(slot);\r\n            }\r\n          };\r\n          window.addEventListener('touchmove', touchMoveBootstrapEventCallback);\r\n          window.addEventListener('touchend', touchEndEventCallback);\r\n        }\r\n      };\r\n      tileNode.addEventListener('touchstart', touchStartEventCallback);\r\n      return () => {\r\n        tileNode.removeEventListener('touchstart', touchStartEventCallback);\r\n      };\r\n    }\r\n  }, [\r\n    dimensions.height,\r\n    dimensions.width,\r\n    isLocked,\r\n    motionDirection,\r\n    onMoveRequest,\r\n    scaleFactor,\r\n    slot,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (isLocked && navigator.maxTouchPoints > 0 && tileRef.current) {\r\n      const tileNode = tileRef.current;\r\n      const touchStartEventCallback = (event: TouchEvent) => {\r\n        event.preventDefault();\r\n        const exitPositionHint: (() => void) | void = onPositionHintRequest(\r\n          position,\r\n          slot\r\n        );\r\n        const touchEndEventCallback = () => {\r\n          window.removeEventListener('touchend', touchEndEventCallback);\r\n          typeof exitPositionHint === 'function' && exitPositionHint();\r\n        };\r\n        window.addEventListener('touchend', touchEndEventCallback);\r\n      };\r\n      tileNode.addEventListener('touchstart', touchStartEventCallback);\r\n      return () => {\r\n        tileNode.removeEventListener('touchstart', touchStartEventCallback);\r\n      };\r\n    }\r\n  }, [isLocked, onPositionHintRequest, position, slot]);\r\n  return (\r\n    <div\r\n      ref={tileRef}\r\n      onClick={handleClick}\r\n      className={classList.join(' ')}\r\n      style={style}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\n","import Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport React, {\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\n\r\nimport { AudioContext } from '../contexts';\r\nimport frog from '../img/frog.svg';\r\nimport {\r\n  IBoardAudio,\r\n  ISlot,\r\n  ITile,\r\n  ITileGrid,\r\n  MotionDirection,\r\n} from '../interfaces';\r\nimport {\r\n  BASE_DIMENSION,\r\n  generateTileGrid,\r\n  getMovableSlots,\r\n  isTileGridInOrder,\r\n  moveTileLogically as moveTile,\r\n} from '../utils/board';\r\nimport Tile from './Tile';\r\n\r\ninterface IBoardProps {}\r\n\r\nconst BASE_IMAGE = frog;\r\nconst BASE_LEVEL = 1;\r\nconst BASE_GRID_DIMENSIONS: ISlot = [3, 2];\r\n\r\nconst Board: React.FC<IBoardProps> = () => {\r\n  const {\r\n    moveTileSound,\r\n    wrongMoveRequestTileSound,\r\n    boardOrderHintSound,\r\n    levelCompletedSound,\r\n  }: IBoardAudio = useContext(AudioContext);\r\n  const boardWrapperRef = useRef<HTMLDivElement>(null);\r\n  const initialLoadRef = useRef(true);\r\n\r\n  const [level, setLevel] = useState(BASE_LEVEL);\r\n  const [tileGridDimensions, setTileGridDimensions] =\r\n    useState<ISlot>(BASE_GRID_DIMENSIONS);\r\n  const [isLevelLoaded, setIsLevelLoaded] = useState(false);\r\n  const [isComputingBoardTiles, setIsComputingBoardTiles] = useState(false);\r\n  const [overlayMessage, setOverlayMessage] = useState('');\r\n  const [width] = useState(BASE_DIMENSION);\r\n  const [height, setHeight] = useState(BASE_DIMENSION);\r\n  const [tileGrid, setTileGrid] = useState<ITileGrid>([]);\r\n  const [emptySlot, setEmptySlot] = useState<ISlot>([0, 0]);\r\n  const [movableSlots, setMovableSlots] = useState<string[]>([]);\r\n  const [scaleFactor, setScaleFactor] = useState(1);\r\n  const [isLoadedFromCache, setIsLoadedFromCache] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isLevelLoaded) {\r\n      localStorage.setItem(\r\n        'boardConfig',\r\n        JSON.stringify({\r\n          level,\r\n          tileGridDimensions,\r\n          width,\r\n          height,\r\n          tileGrid,\r\n          emptySlot,\r\n          movableSlots,\r\n          scaleFactor,\r\n        })\r\n      );\r\n    }\r\n  }, [\r\n    emptySlot,\r\n    height,\r\n    isLevelLoaded,\r\n    level,\r\n    movableSlots,\r\n    scaleFactor,\r\n    tileGrid,\r\n    tileGridDimensions,\r\n    width,\r\n  ]);\r\n\r\n  const nextLevel = useCallback(() => {\r\n    setMovableSlots([]);\r\n    setTimeout(async () => {\r\n      setOverlayMessage(`You've completed level ${level}`);\r\n      tileGrid.flat().forEach((tile) => {\r\n        delete tile.type;\r\n      });\r\n      setTileGrid([...tileGrid]);\r\n      await levelCompletedSound();\r\n      setLevel((prevLevel) => prevLevel + 1);\r\n      setTileGridDimensions(([x, y]) => {\r\n        if (y >= x) {\r\n          x++;\r\n        } else {\r\n          y++;\r\n        }\r\n        return [x, y];\r\n      });\r\n      setTileGrid([]);\r\n      setIsLevelLoaded(false);\r\n      setIsComputingBoardTiles(false);\r\n      setOverlayMessage('');\r\n    }, 400);\r\n  }, [level, levelCompletedSound, tileGrid]);\r\n\r\n  const handleTileMoveRequest = useCallback(\r\n    (slot: ISlot) => {\r\n      moveTile(tileGrid, emptySlot, slot);\r\n      setEmptySlot(slot);\r\n      moveTileSound();\r\n      if (isTileGridInOrder(tileGrid)) {\r\n        nextLevel();\r\n      } else {\r\n        setMovableSlots(\r\n          getMovableSlots(slot, [\r\n            tileGrid.length - 1,\r\n            tileGrid[0].length - 1,\r\n          ]).map((slot): string => slot.join(''))\r\n        );\r\n      }\r\n      setTileGrid([...tileGrid]);\r\n    },\r\n    [emptySlot, nextLevel, tileGrid, moveTileSound]\r\n  );\r\n\r\n  const handleTilePositionHintRequest = useCallback(\r\n    (position: number, slot: ISlot): (() => void) | void => {\r\n      const requestingTile = tileGrid.flat()[position];\r\n      const slotTile = tileGrid[slot[0]][slot[1]];\r\n      if (requestingTile !== slotTile) {\r\n        const { type: requestingTileType } = requestingTile;\r\n        const { type: slotTileType } = slotTile;\r\n        requestingTile.type = 'SLOT_HINT';\r\n        slotTile.type = 'MOVE_HINT';\r\n        setTileGrid([...tileGrid]);\r\n        return () => {\r\n          requestingTileType\r\n            ? (requestingTile.type = requestingTileType)\r\n            : delete requestingTile.type;\r\n          slotTileType ? (slotTile.type = slotTileType) : delete slotTile.type;\r\n          setTileGrid([...tileGrid]);\r\n        };\r\n      }\r\n    },\r\n    [tileGrid]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!isComputingBoardTiles) {\r\n      const serializedBoardConfig = localStorage.getItem('boardConfig');\r\n      if (serializedBoardConfig && initialLoadRef.current === true) {\r\n        if (!isLoadedFromCache) {\r\n          setIsLoadedFromCache(true);\r\n          const {\r\n            level,\r\n            tileGridDimensions,\r\n            width,\r\n            height,\r\n            tileGrid,\r\n            emptySlot,\r\n            movableSlots,\r\n            scaleFactor,\r\n          } = JSON.parse(serializedBoardConfig);\r\n          if (\r\n            [\r\n              level,\r\n              tileGridDimensions,\r\n              width,\r\n              height,\r\n              tileGrid,\r\n              emptySlot,\r\n              movableSlots,\r\n              scaleFactor,\r\n            ].every((key) => key != null)\r\n          ) {\r\n            setLevel(level);\r\n            setTileGridDimensions(tileGridDimensions);\r\n            setHeight(height);\r\n            setTileGrid(tileGrid);\r\n            setEmptySlot(emptySlot);\r\n            setMovableSlots(movableSlots);\r\n            setScaleFactor(scaleFactor);\r\n          }\r\n        }\r\n      } else {\r\n        const image = new Image();\r\n        image.onload = () => {\r\n          const height = BASE_DIMENSION / (image.width / image.height);\r\n          image.remove();\r\n          setHeight(height);\r\n          const { tileGrid, emptySlot, movableSlots } = generateTileGrid({\r\n            width,\r\n            height,\r\n            dimensions: tileGridDimensions,\r\n            image: BASE_IMAGE,\r\n          });\r\n          setTileGrid(tileGrid);\r\n          setEmptySlot(emptySlot);\r\n          setMovableSlots(\r\n            movableSlots.map((movableSlot): string => movableSlot.join(''))\r\n          );\r\n        };\r\n        image.style.visibility = 'hidden';\r\n        document.body.append(image);\r\n        image.src = BASE_IMAGE;\r\n      }\r\n      initialLoadRef.current = false;\r\n      setIsComputingBoardTiles(true);\r\n    }\r\n  }, [width, tileGridDimensions, isLoadedFromCache, isComputingBoardTiles]);\r\n\r\n  useEffect(() => {\r\n    const resizeCallback = () => {\r\n      if (boardWrapperRef.current) {\r\n        const { height: boardHeight, width: boardWidth } = { width, height };\r\n        const { parentElement } = boardWrapperRef.current;\r\n        if (parentElement) {\r\n          const {\r\n            offsetHeight: boardParentHeight,\r\n            offsetWidth: boardParentWidth,\r\n          } = parentElement;\r\n          const heightScaleFactor = boardParentHeight / boardHeight;\r\n          const widthScaleFactor = boardParentWidth / boardWidth;\r\n          if (heightScaleFactor < 1 || widthScaleFactor < 1) {\r\n            setScaleFactor(\r\n              heightScaleFactor < widthScaleFactor\r\n                ? heightScaleFactor\r\n                : widthScaleFactor\r\n            );\r\n          } else {\r\n            setScaleFactor(1);\r\n          }\r\n        }\r\n      }\r\n    };\r\n    window.addEventListener('resize', resizeCallback);\r\n    resizeCallback();\r\n    return () => {\r\n      window.removeEventListener('resize', resizeCallback);\r\n    };\r\n  }, [height, width]);\r\n\r\n  useEffect(() => {\r\n    if (boardWrapperRef.current) {\r\n      const boardNode = boardWrapperRef.current;\r\n      const mouseDownEventCallback = (event: MouseEvent) => {\r\n        if (event.button === 0) {\r\n          let exitBoardHint: (() => void) | undefined;\r\n          const hintTimeout = setTimeout(() => {\r\n            tileGrid.forEach((row, rowIndex) => {\r\n              row.forEach((tile, columnIndex) => {\r\n                tile.slotHint = [rowIndex, columnIndex];\r\n              });\r\n            });\r\n            boardOrderHintSound();\r\n            setTileGrid([...tileGrid]);\r\n            exitBoardHint = () => {\r\n              tileGrid.flat().forEach((tile) => delete tile.slotHint);\r\n              setTileGrid([...tileGrid]);\r\n            };\r\n          }, 500);\r\n          const mouseUpEventCallback = () => {\r\n            clearTimeout(hintTimeout);\r\n            typeof exitBoardHint === 'function' && exitBoardHint();\r\n            window.removeEventListener('mouseup', mouseUpEventCallback);\r\n          };\r\n          window.addEventListener('mouseup', mouseUpEventCallback);\r\n        }\r\n      };\r\n      boardNode.addEventListener('mousedown', mouseDownEventCallback);\r\n      return () => {\r\n        boardNode.removeEventListener('mousedown', mouseDownEventCallback);\r\n      };\r\n    }\r\n  }, [tileGrid, boardOrderHintSound]);\r\n\r\n  useEffect(() => {\r\n    if (isLevelLoaded) {\r\n      const keyupCallback = (event: KeyboardEvent) => {\r\n        const [x, y] = emptySlot;\r\n        const slotToMove: ISlot = ((): ISlot => {\r\n          switch (event.key) {\r\n            case 'ArrowUp':\r\n            case 'w':\r\n              return [x + 1, y];\r\n            case 'ArrowRight':\r\n            case 'd':\r\n              return [x, y - 1];\r\n            case 'ArrowDown':\r\n            case 's':\r\n              return [x - 1, y];\r\n            case 'ArrowLeft':\r\n            case 'a':\r\n              return [x, y + 1];\r\n          }\r\n          return emptySlot;\r\n        })();\r\n        if (movableSlots.includes(slotToMove.join(''))) {\r\n          handleTileMoveRequest(slotToMove);\r\n        } else {\r\n          wrongMoveRequestTileSound();\r\n        }\r\n      };\r\n      window.addEventListener('keyup', keyupCallback);\r\n      return () => {\r\n        window.removeEventListener('keyup', keyupCallback);\r\n      };\r\n    }\r\n  }, [\r\n    emptySlot,\r\n    movableSlots,\r\n    handleTileMoveRequest,\r\n    isLevelLoaded,\r\n    wrongMoveRequestTileSound,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (!isLevelLoaded) {\r\n      if (tileGrid.length > 0) {\r\n        setOverlayMessage(`Level ${level}`);\r\n        const timeout = setTimeout(() => {\r\n          setOverlayMessage('');\r\n          setIsLevelLoaded(true);\r\n        }, 3000);\r\n        return () => clearTimeout(timeout);\r\n      } else {\r\n        setOverlayMessage(`Loading level ${level}...`);\r\n      }\r\n    }\r\n  }, [level, tileGrid, isLevelLoaded]);\r\n\r\n  return (\r\n    <div\r\n      ref={boardWrapperRef}\r\n      style={{\r\n        transform: `scale(${scaleFactor})`,\r\n        transformOrigin: 'top left',\r\n        width: `${100 / scaleFactor}%`,\r\n        height: `${100 / scaleFactor}%`,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          backgroundColor: '#ccc',\r\n          overflow: 'hidden',\r\n          counterReset: 'tile-number',\r\n          borderRadius: 3,\r\n          position: 'relative',\r\n          transformOrigin: 'top left',\r\n          width,\r\n          height,\r\n        }}\r\n      >\r\n        {tileGrid &&\r\n          tileGrid\r\n            .flat()\r\n            .map((tile: ITile & { motionDirection?: MotionDirection }) => {\r\n              const [x, y] = tile.slot;\r\n              tile.isLocked = !movableSlots.includes(`${x}${y}`);\r\n              if (!tile.isLocked) {\r\n                if (emptySlot[0] === tile.slot[0]) {\r\n                  tile.motionDirection =\r\n                    emptySlot[1] - tile.slot[1] === 1\r\n                      ? MotionDirection.RIGHT\r\n                      : MotionDirection.LEFT;\r\n                } else {\r\n                  tile.motionDirection =\r\n                    emptySlot[0] - tile.slot[0] === 1\r\n                      ? MotionDirection.BOTTOM\r\n                      : MotionDirection.TOP;\r\n                }\r\n              }\r\n              return (\r\n                <Tile\r\n                  {...tile}\r\n                  key={tile.position}\r\n                  scaleFactor={scaleFactor}\r\n                  onMoveRequest={handleTileMoveRequest}\r\n                  onPositionHintRequest={handleTilePositionHintRequest}\r\n                />\r\n              );\r\n            })}\r\n        {overlayMessage && (\r\n          <Box\r\n            display=\"flex\"\r\n            position=\"absolute\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            zIndex={9999}\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            bgcolor=\"rgba(0,0,0,.7)\"\r\n            color=\"#fff\"\r\n          >\r\n            <Typography variant=\"h1\">{overlayMessage}</Typography>\r\n          </Box>\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import Box from '@material-ui/core/Box';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { ThemeProvider, createTheme } from '@material-ui/core/styles';\r\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\r\nimport React, { useRef } from 'react';\r\n\r\nimport Board from './components/Board';\r\nimport { AudioProvider } from './contexts';\r\n\r\ninterface IAppProps {}\r\n\r\nconst theme = createTheme({\r\n  components: {\r\n    MuiCssBaseline: {\r\n      styleOverrides: {\r\n        '@global': {\r\n          html: {\r\n            position: 'relative',\r\n            minHeight: '100%',\r\n          },\r\n          body: {\r\n            margin: 0,\r\n            height: '100%',\r\n            fontFamily: 'RobotoRegular, sans-serif',\r\n            cursor: 'default',\r\n            backgroundColor: 'whitesmoke',\r\n            color: '#282f3e',\r\n            '-webkit-touch-callout': 'none',\r\n            '-webkit-user-select': 'none',\r\n            '-khtml-user-select': 'none',\r\n            '-moz-user-select': 'none',\r\n            '-ms-user-select': 'none',\r\n            'user-select': 'none',\r\n            '-webkit-font-smoothing': 'antialiased',\r\n            '-moz-osx-font-smoothing': 'grayscale',\r\n          },\r\n          code: {\r\n            fontFamily:\r\n              \"source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace\",\r\n          },\r\n          pre: {\r\n            margin: 0,\r\n            padding: 0,\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst App: React.FC<IAppProps> = () => {\r\n  const boardWrapperRef = useRef();\r\n  const handleClickFullScreenButton = () => {\r\n    if (boardWrapperRef.current) {\r\n      const boardWrapperNode: any = boardWrapperRef.current!;\r\n      if (boardWrapperNode.requestFullscreen) {\r\n        boardWrapperNode.requestFullscreen();\r\n      } else if (boardWrapperNode.webkitRequestFullscreen) {\r\n        /* Safari */\r\n        boardWrapperNode.webkitRequestFullscreen();\r\n      } else if (boardWrapperNode.msRequestFullscreen) {\r\n        /* IE11 */\r\n        boardWrapperNode.msRequestFullscreen();\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Box\r\n        sx={{\r\n          position: 'fixed',\r\n          top: 0,\r\n          left: 0,\r\n          width: '100%',\r\n          height: '100%',\r\n          bgcolor: '#262626',\r\n          boxSizing: 'border-box',\r\n          p: 3,\r\n        }}\r\n      >\r\n        <Box\r\n          ref={boardWrapperRef}\r\n          sx={{\r\n            width: '100%',\r\n            height: '100%',\r\n          }}\r\n        >\r\n          <AudioProvider>\r\n            <Board />\r\n          </AudioProvider>\r\n        </Box>\r\n        <IconButton\r\n          onClick={handleClickFullScreenButton}\r\n          sx={{ position: 'absolute', bottom: 5, right: 5, color: '#fff' }}\r\n          size=\"large\"\r\n        >\r\n          <FullscreenIcon sx={{ fontSize: '1.2em' }} />\r\n        </IconButton>\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}