server {
  listen ${PORT};
  root /app/main-ui/public;
  server_tokens off;
  resolver ${RESOLVER_IP} valid=45s;
  set $CORE_BACKEND_URL ${BACKEND_URL};
  add_header X-Robots-Tag "noindex, noarchive, nosnippet";
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
  add_header X-Frame-Options SAMEORIGIN;
  add_header X-Content-Type-Options nosniff;
  add_header X-XSS-Protection "1; mode=block";
  client_header_timeout 60;
  client_body_timeout 60;
  keepalive_timeout 60;
  #Enable Gzip compressed.
  gzip on;

  # Enable compression both for HTTP/1.0 and HTTP/1.1.
  gzip_http_version  1.1;

  # Compression level (1-9).
  # 5 is a perfect compromise between size and cpu usage, offering about
  # 75% reduction for most ascii files (almost identical to level 9).
  gzip_comp_level    5;

  # Don't compress anything that's already small and unlikely to shrink much
  # if at all (the default is 20 bytes, which is bad as that usually leads to
  # larger files after gzipping).
  gzip_min_length    256;

  # Compress data even for clients that are connecting to us via proxies,
  # identified by the "Via" header (required for CloudFront).
  gzip_proxied	   any;

  # Tell proxies to cache both the gzipped and regular version of a resource
  # whenever the client's Accept-Encoding capabilities header varies;
  # Avoids the issue where a non-gzip capable client (which is extremely rare
  # today) would display gibberish if their proxy gave them the gzipped version.
  gzip_vary          on;

  # Compress all output labeled with one of the following MIME-types.
  gzip_types
  application/atom+xml
  application/javascript
  application/json
  application/rss+xml
  application/vnd.ms-fontobject
  application/x-font-ttf
  application/x-web-app-manifest+json
  application/xhtml+xml
  application/xml
  application/octet-stream
  font/opentype
  image/svg+xml
  image/x-icon
  image/png
  image/jpg
  text/css
  text/plain
  text/x-component;
  # text/html is always compressed by HttpGzipModule
  ## Start: Size Limits & Buffer Overflows ##
  client_header_buffer_size 4k;
  large_client_header_buffers 2 4k;
  client_max_body_size 100M;
  proxy_buffers 16 16k;
  proxy_buffer_size 16k;
  ## END: Size Limits & Buffer Overflows ##
  index index.html index.htm; # what file to server as index
  server_name localhost;

  location / {
    index do-not-use-me.html;
    try_files $uri @index;
    if (!-e $request_filename) {
      rewrite ^(.*)$ /index.html break;
    }
  }
  location @index {
    add_header Cache-Control "no-store, no-cache, must-revalidate";
    expires 0;
    try_files /index.html =404;
  }
  location ~* ^\/messaging\/realtime-engine {
    proxy_pass $CORE_BACKEND_URL;
    proxy_http_version 1.1;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }
  location ~* ^\/api\/.+ {
    rewrite /api/(.*) /$1 break;
    proxy_pass $CORE_BACKEND_URL;
    proxy_http_version 1.1;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }
  # Media: images, icons, video, audio, HTC
  location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp3|mp4|ogg|ogv|webm|htc|ttf|json|txt)$ {
    expires 1y;
    access_log off;
    add_header Cache-Control "public";
    try_files $uri $uri/ /index.html;
  }
  #deny access to home
  location ~ /\. {
    deny all;
    access_log off;
    log_not_found off;
  }
  #well known locations
  location ~ /.well-known {
    allow all;
  }
  # Javascript and CSS files
  location ~* \.(?:css|js)$ {
    try_files $uri $uri/ /index.html$is_args$args;
    expires 1y;
    access_log off;
    add_header Cache-Control "public";
  }
  # Any route containing a file extension (e.g. /devicesfile.js)
  location ~ ^.+\..+$ {
    try_files $uri =404;
  }

  try_files $uri $uri/ /index.html$is_args$args;
  access_log /var/log/nginx/access.log main if=$log_ua;
}